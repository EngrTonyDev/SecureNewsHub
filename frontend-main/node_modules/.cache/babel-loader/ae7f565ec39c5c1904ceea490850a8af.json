{"ast":null,"code":"import { ApolloClient, InMemoryCache, gql } from \"@apollo/client\";\nconst client = new ApolloClient({\n  uri: 'http://localhost:5000/graphql',\n  cache: new InMemoryCache()\n});\nexport const getNewsByUser = async userId => {\n  try {\n    const result = await client.query({\n      query: gql`\n                query getNews($userId: ID!) {\n                    getNewsByUserId(userId: $userId) {\n                        _id\n                        title\n                        description\n                        permalink\n                        date\n                        user {\n                            _id\n                            email\n                        }\n                        category {\n                            _id\n                            name\n                        }\n                        tags {\n                            _id\n                            name\n                        }\n                    }\n                }\n            `,\n      variables: {\n        userId\n      }\n    });\n\n    if (result && result.data && result.data.getNewsByUserId) {\n      return {\n        error: false,\n        data: result.data.getNewsByUserId,\n        msg: ''\n      };\n    }\n\n    return {\n      error: true,\n      data: null,\n      msg: 'Error interno del servidor'\n    };\n  } catch (error) {\n    if (error && error.response && error.response.data && error.response.data.msg) {\n      return {\n        error: true,\n        data: null,\n        msg: error.response.data.msg\n      };\n    }\n\n    console.log(error.response);\n    return {\n      error: true,\n      data: null,\n      msg: 'Error interno del servidor'\n    };\n  }\n};\nexport const getSearchNews = async (userId, search, categoryId, tags) => {\n  try {\n    const result = await client.query({\n      query: gql`\n                query searchNews($userId: ID!, $search: String, $categoryId: ID, $tags: [String]) {\n                    getSearchNews(userId: $userId, search: $search, categoryId: $categoryId, tags: $tags) {\n                        _id\n                        title\n                        description\n                        permalink\n                        date\n                        user {\n                            _id\n                            email\n                        }\n                        category {\n                            _id\n                            name\n                        }\n                        tags {\n                            _id\n                            name\n                        }\n                    }\n                }\n            `,\n      variables: {\n        userId,\n        search,\n        categoryId,\n        tags\n      }\n    });\n\n    if (result && result.data && result.data.getSearchNews) {\n      return {\n        error: false,\n        data: result.data.getSearchNews,\n        msg: ''\n      };\n    }\n\n    return {\n      error: true,\n      data: null,\n      msg: 'Error interno del servidor'\n    };\n  } catch (error) {\n    if (error && error.response && error.response.data && error.response.data.msg) {\n      return {\n        error: true,\n        data: null,\n        msg: error.response.data.msg\n      };\n    }\n\n    console.log(error.response);\n    return {\n      error: true,\n      data: null,\n      msg: 'Error interno del servidor'\n    };\n  }\n};","map":{"version":3,"sources":["C:/Users/m_jim/Desktop/isw711/frontend/src/services/NewsService.js"],"names":["ApolloClient","InMemoryCache","gql","client","uri","cache","getNewsByUser","userId","result","query","variables","data","getNewsByUserId","error","msg","response","console","log","getSearchNews","search","categoryId","tags"],"mappings":"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","sourcesContent":["import {\r\n    ApolloClient,\r\n    InMemoryCache,\r\n    gql\r\n} from \"@apollo/client\";\r\n\r\nconst client = new ApolloClient({\r\n    uri: 'http://localhost:5000/graphql',\r\n    cache: new InMemoryCache()\r\n});\r\n\r\nexport const getNewsByUser = async (userId) => {\r\n    try {\r\n        const result = await client\r\n            .query({\r\n                query: gql`\r\n                query getNews($userId: ID!) {\r\n                    getNewsByUserId(userId: $userId) {\r\n                        _id\r\n                        title\r\n                        description\r\n                        permalink\r\n                        date\r\n                        user {\r\n                            _id\r\n                            email\r\n                        }\r\n                        category {\r\n                            _id\r\n                            name\r\n                        }\r\n                        tags {\r\n                            _id\r\n                            name\r\n                        }\r\n                    }\r\n                }\r\n            `,\r\n                variables: { userId }\r\n            })\r\n        if (result && result.data && result.data.getNewsByUserId) {\r\n            return { error: false, data: result.data.getNewsByUserId, msg: '' };\r\n        }\r\n        return { error: true, data: null, msg: 'Error interno del servidor' };\r\n    } catch (error) {\r\n        if (error && error.response && error.response.data && error.response.data.msg) {\r\n            return { error: true, data: null, msg: error.response.data.msg };\r\n        }\r\n        console.log(error.response)\r\n        return { error: true, data: null, msg: 'Error interno del servidor' };\r\n    }\r\n}\r\n\r\nexport const getSearchNews = async (userId, search, categoryId, tags) => {\r\n    try {\r\n        const result = await client\r\n            .query({\r\n                query: gql`\r\n                query searchNews($userId: ID!, $search: String, $categoryId: ID, $tags: [String]) {\r\n                    getSearchNews(userId: $userId, search: $search, categoryId: $categoryId, tags: $tags) {\r\n                        _id\r\n                        title\r\n                        description\r\n                        permalink\r\n                        date\r\n                        user {\r\n                            _id\r\n                            email\r\n                        }\r\n                        category {\r\n                            _id\r\n                            name\r\n                        }\r\n                        tags {\r\n                            _id\r\n                            name\r\n                        }\r\n                    }\r\n                }\r\n            `,\r\n                variables: { userId, search, categoryId, tags, }\r\n            })\r\n        if (result && result.data && result.data.getSearchNews) {\r\n            return { error: false, data: result.data.getSearchNews, msg: '' };\r\n        }\r\n        return { error: true, data: null, msg: 'Error interno del servidor' };\r\n    } catch (error) {\r\n        if (error && error.response && error.response.data && error.response.data.msg) {\r\n            return { error: true, data: null, msg: error.response.data.msg };\r\n        }\r\n        console.log(error.response)\r\n        return { error: true, data: null, msg: 'Error interno del servidor' };\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}