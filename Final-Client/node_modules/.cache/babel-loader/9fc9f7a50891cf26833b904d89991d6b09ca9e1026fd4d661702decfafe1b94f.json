{"ast":null,"code":"import { ApolloClient, InMemoryCache, createHttpLink } from '@apollo/client';\nimport { gql } from 'graphql-tag';\nconst client = new ApolloClient({\n  link: createHttpLink({\n    uri: 'http://localhost:5000/graphql'\n  }),\n  cache: new InMemoryCache()\n});\nconst queryGetNewsByUser = gql`\n  query getNewsByUserId($userId: String) {\n    getNewsByUserId(userId: $userId) {\n      _id\n      title\n      description\n      permanlink\n      date\n      user {\n        _id\n        email\n      }\n      category {\n        _id\n        name\n      }\n      tags {\n        _id\n        name\n      }\n    }\n  }\n`;\nexport const getNewsByUser = async userId => {\n  try {\n    const {\n      data\n    } = await client.query({\n      query: queryGetNewsByUser,\n      variables: {\n        userId: userId\n      }\n    });\n    if (data && data.getNewsByUserId) {\n      return {\n        error: false,\n        data: data.getNewsByUserId,\n        msg: ''\n      };\n    }\n    return {\n      error: true,\n      data: null,\n      msg: 'Error interno del servidor'\n    };\n  } catch (error) {\n    if (error && error.response && error.response.data && error.response.data.msg) {\n      return {\n        error: true,\n        data: null,\n        msg: error.response.data.msg\n      };\n    }\n    console.log(error.response);\n    return {\n      error: true,\n      data: null,\n      msg: 'Error interno del servidor'\n    };\n  }\n};\nconst queryGetSearchNews = gql`\nquery getSearchNews($userId: String, $search: String, $categoryId: String, $tags: [String]) {\n    getSearchNews(userId: $userId, search: $search, categoryId: $categoryId, tags: $tags) {\n        _id\n        title\n        description\n        permanlink\n        date\n        user {\n            _id\n            email\n        }\n        category {\n            _id\n            name\n        }\n        tags {\n            _id\n            name\n        }\n    }\n}\n`;\nexport const getSearchNews = async (userId, search, categoryId, tags) => {\n  try {\n    console.log(\"userId\");\n    console.log(userId);\n    console.log(\"search\");\n    console.log(search);\n    console.log(\"categoryId\");\n    console.log(categoryId);\n    console.log(\"tags\");\n    console.log(tags);\n    const {\n      data\n    } = await client.query({\n      query: queryGetSearchNews,\n      variables: {\n        userId: userId,\n        search: search,\n        categoryId: categoryId,\n        tags: tags\n      }\n    });\n    if (data && data.getSearchNews) {\n      return {\n        error: false,\n        data: data.getSearchNews,\n        msg: ''\n      };\n    }\n    return {\n      error: true,\n      data: null,\n      msg: 'Error interno del servidor'\n    };\n  } catch (error) {\n    if (error && error.response && error.response.data && error.response.data.msg) {\n      return {\n        error: true,\n        data: null,\n        msg: error.response.data.msg\n      };\n    }\n    console.log(error.response);\n    return {\n      error: true,\n      data: null,\n      msg: 'Error interno del servidor'\n    };\n  }\n};","map":{"version":3,"names":["ApolloClient","InMemoryCache","createHttpLink","gql","client","link","uri","cache","queryGetNewsByUser","getNewsByUser","userId","data","query","variables","getNewsByUserId","error","msg","response","console","log","queryGetSearchNews","getSearchNews","search","categoryId","tags"],"sources":["C:/Users/tony/OneDrive - Universidad TÃ©cnica Nacional/Escritorio/proyecto/proyecto final/ISW-711-final-cliente/src/services/newsService.js"],"sourcesContent":["import { ApolloClient, InMemoryCache, createHttpLink } from '@apollo/client';\nimport { gql } from 'graphql-tag';\n\nconst client = new ApolloClient({\n    link: createHttpLink({ uri: 'http://localhost:5000/graphql' }),\n    cache: new InMemoryCache(),\n});\nconst queryGetNewsByUser = gql`\n  query getNewsByUserId($userId: String) {\n    getNewsByUserId(userId: $userId) {\n      _id\n      title\n      description\n      permanlink\n      date\n      user {\n        _id\n        email\n      }\n      category {\n        _id\n        name\n      }\n      tags {\n        _id\n        name\n      }\n    }\n  }\n`;\n\nexport const getNewsByUser = async (userId) => {\n    try {\n\n\n        const { data } = await client.query({\n            query: queryGetNewsByUser,\n            variables: {\n                userId: userId,\n            },\n        });\n\n\n        if (data && data.getNewsByUserId) {\n            return { error: false, data: data.getNewsByUserId, msg: '' };\n        }\n        return { error: true, data: null, msg: 'Error interno del servidor' };\n    } catch (error) {\n        if (error && error.response && error.response.data && error.response.data.msg) {\n            return { error: true, data: null, msg: error.response.data.msg };\n        }\n        console.log(error.response)\n        return { error: true, data: null, msg: 'Error interno del servidor' };\n    }\n};\n\nconst queryGetSearchNews = gql`\nquery getSearchNews($userId: String, $search: String, $categoryId: String, $tags: [String]) {\n    getSearchNews(userId: $userId, search: $search, categoryId: $categoryId, tags: $tags) {\n        _id\n        title\n        description\n        permanlink\n        date\n        user {\n            _id\n            email\n        }\n        category {\n            _id\n            name\n        }\n        tags {\n            _id\n            name\n        }\n    }\n}\n`;\n\nexport const getSearchNews = async (userId, search, categoryId, tags) => {\n    try {\n        console.log(\"userId\");\n        console.log(userId);\n        console.log(\"search\");\n        console.log(search);\n        console.log(\"categoryId\");\n        console.log(categoryId);\n        console.log(\"tags\");\n        console.log(tags);\n        const { data } = await client.query({\n            query: queryGetSearchNews,\n            variables: {\n                userId: userId,\n                search: search,\n                categoryId: categoryId,\n                tags: tags\n            },\n        });\n        \n        if (data && data.getSearchNews) {\n            return { error: false, data: data.getSearchNews, msg: '' };\n        }\n        return { error: true, data: null, msg: 'Error interno del servidor' };\n    } catch (error) {\n        if (error && error.response && error.response.data && error.response.data.msg) {\n            return { error: true, data: null, msg: error.response.data.msg };\n        }\n        console.log(error.response);\n        return { error: true, data: null, msg: 'Error interno del servidor' };\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}